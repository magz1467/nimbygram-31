import React, { useEffect, useState } from 'react';
import { useSearchParams } from 'react-router-dom';
import SearchForm from '../components/SearchForm';
import PlanningApplicationList from '../components/PlanningApplicationList';
import ApplicationMap from '../components/ApplicationMap';
import LoadingSpinner from '../components/LoadingSpinner';
import { useApplications } from '../context/ApplicationContext';

const SearchResults: React.FC = () => {
  const [searchParams, setSearchParams] = useSearchParams();
  const { applications, loading, error, fetchApplications } = useApplications();
  const [viewMode, setViewMode] = useState<'list' | 'map'>('list');

  // Get search parameters from URL
  const query = searchParams.get('query') || '';
  const location = searchParams.get('location') || '';
  const radius = parseInt(searchParams.get('radius') || '5', 10);

  // Handle search form submission
  const handleSearch = (newQuery: string, newLocation: string, newRadius: number) => {
    // Update URL parameters
    setSearchParams({
      query: newQuery,
      location: newLocation,
      radius: newRadius.toString()
    });
  };

  // Fetch applications when search parameters change
  useEffect(() => {
    if (query || location) {
      fetchApplications(query, location, radius);
    }
  }, [query, location, radius, fetchApplications]);

  return (
    <div className="container mx-auto max-w-6xl px-4 py-8">
      <h1 className="text-3xl font-bold mb-6">Search Planning Applications</h1>
      
      <div className="mb-8">
        <SearchForm 
          onSearch={handleSearch}
          initialQuery={query}
          initialLocation={location}
          initialRadius={radius}
        />
      </div>
      
      {query || location ? (
        <div>
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-2xl font-semibold">
              Results {applications.length > 0 && !loading && `(${applications.length})`}
            </h2>
            
            <div className="flex space-x-2">
              <button
                onClick={() => setViewMode('list')}
                className={`px-4 py-2 rounded-md ${
                  viewMode === 'list' 
                    ? 'bg-blue-600 text-white' 
                    : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                }`}
              >
                List View
              </button>
              <button
                onClick={() => setViewMode('map')}
                className={`px-4 py-2 rounded-md ${
                  viewMode === 'map' 
                    ? 'bg-blue-600 text-white' 
                    : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                }`}
              >
                Map View
              </button>
            </div>
          </div>
          
          {error && (
            <div className="bg-red-50 text-red-800 p-4 rounded-md mb-6">
              {error}
            </div>
          )}
          
          {loading ? (
            <div className="flex justify-center py-12">
              <LoadingSpinner size="large" text="Searching for applications..." />
            </div>
          ) : (
            <>
              {viewMode === 'list' ? (
                <PlanningApplicationList applications={applications} />
              ) : (
                <div>
                  <ApplicationMap 
                    applications={applications}
                    height="600px"
                  />
                  <div className="mt-6">
                    <h3 className="text-xl font-semibold mb-4">Applications in this area:</h3>
                    <div className="bg-white rounded-lg shadow-sm p-4">
                      {applications.length === 0 ? (
                        <p className="text-gray-500 text-center py-4">No applications found in this area</p>
                      ) : (
                        <ul className="divide-y divide-gray-200">
                          {applications.map(app => (
                            <li key={app.id} className="py-3">
                              <a 
                                href={`/application/${app.id}`}
                                className="block hover:bg-gray-50 p-2 -m-2 rounded"
                              >
                                <h4 className="font-medium text-blue-600">{app.title}</h4>
                                <p className="text-sm text-gray-500">{app.address}</p>
                                <div className="flex items-center mt-1">
                                  <span className={`px-2 py-1 text-xs rounded-full ${
                                    app.status.toLowerCase() === 'approved' ? 'bg-green-100 text-green-800' :
                                    app.status.toLowerCase() === 'rejected' ? 'bg-red-100 text-red-800' :
                                    'bg-yellow-100 text-yellow-800'
                                  }`}>
                                    {app.status}
                                  </span>
                                  <span className="text-xs text-gray-500 ml-2">
                                    {new Date(app.date).toLocaleDateString()}
                                  </span>
                                </div>
                              </a>
                            </li>
                          ))}
                        </ul>
                      )}
                    </div>
                  </div>
                </div>
              )}
            </>
          )}
        </div>
      ) : (
        <div className="text-center py-12 bg-gray-50 rounded-lg">
          <h3 className="text-xl font-medium text-gray-700 mb-2">Enter search criteria</h3>
          <p className="text-gray-600">
            Use the search form above to find planning applications in your area
          </p>
        </div>
      )}
    </div>
  );
};

export default SearchResults; 