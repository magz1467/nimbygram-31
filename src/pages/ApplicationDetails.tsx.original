import React, { useEffect, useState } from 'react';
import { useParams, Link } from 'react-router-dom';
import { useApplications } from '../context/ApplicationContext';
import LoadingSpinner from '../components/LoadingSpinner';
import ApplicationMap from '../components/ApplicationMap';

const ApplicationDetails: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const { getApplicationById, loading } = useApplications();
  const [application, setApplication] = useState<any>(undefined);
  const [activeTab, setActiveTab] = useState<'details' | 'documents' | 'map'>('details');

  useEffect(() => {
    const fetchApplication = async () => {
      if (id) {
        const app = await getApplicationById(id);
        setApplication(app);
      }
    };
    
    fetchApplication();
  }, [id, getApplicationById]);

  // Format date to be more readable
  const formatDate = (dateString?: string) => {
    if (!dateString) return '';
    const options: Intl.DateTimeFormatOptions = { year: 'numeric', month: 'long', day: 'numeric' };
    return new Date(dateString).toLocaleDateString('en-GB', options);
  };

  // Get status color based on application status
  const getStatusColor = (status?: string) => {
    if (!status) return 'bg-gray-100 text-gray-800';
    
    switch (status.toLowerCase()) {
      case 'approved':
        return 'bg-green-100 text-green-800';
      case 'rejected':
      case 'refused':
        return 'bg-red-100 text-red-800';
      case 'pending':
        return 'bg-yellow-100 text-yellow-800';
      case 'in progress':
        return 'bg-blue-100 text-blue-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  if (loading) {
    return (
      <div className="container mx-auto max-w-6xl px-4 py-12 flex justify-center">
        <LoadingSpinner size="large" text="Loading application details..." />
      </div>
    );
  }

  if (!application) {
    return (
      <div className="container mx-auto max-w-6xl px-4 py-12 text-center">
        <h2 className="text-3xl font-bold mb-4">Application Not Found</h2>
        <p className="text-xl text-gray-600 mb-8">The application you are looking for doesn't exist or has been removed.</p>
        <Link to="/search" className="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-6 rounded-md transition duration-200">
          Search Applications
        </Link>
      </div>
    );
  }

  return (
    <div className="container mx-auto max-w-6xl px-4 py-12">
      <div className="mb-6">
        <Link to="/search" className="text-blue-600 hover:text-blue-800 flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clipRule="evenodd" />
          </svg>
          Back to Search Results
        </Link>
      </div>
      
      <div className="bg-white rounded-lg shadow-md overflow-hidden">
        <div className="p-6">
          <div className="flex flex-wrap justify-between items-start mb-6">
            <h1 className="text-3xl font-bold text-gray-900 mb-2 md:mb-0 md:mr-4">{application.title}</h1>
            <span className={`px-4 py-1 rounded-full text-sm font-medium ${getStatusColor(application.status)}`}>
              {application.status}
            </span>
          </div>
          
          <div className="mb-8">
            <div className="bg-gray-50 p-4 rounded-md">
              <div className="grid md:grid-cols-2 gap-4">
                <div>
                  <p className="text-gray-600 text-sm">Reference</p>
                  <p className="font-medium">{application.reference}</p>
                </div>
                <div>
                  <p className="text-gray-600 text-sm">Date Submitted</p>
                  <p>{formatDate(application.date)}</p>
                </div>
                <div>
                  <p className="text-gray-600 text-sm">Applicant</p>
                  <p>{application.applicant}</p>
                </div>
                <div>
                  <p className="text-gray-600 text-sm">Address</p>
                  <p>{application.address}</p>
                </div>
              </div>
            </div>
          </div>
          
          {/* Tabs */}
          <div className="border-b border-gray-200 mb-6">
            <nav className="-mb-px flex space-x-8">
              <button
                onClick={() => setActiveTab('details')}
                className={`py-4 px-1 border-b-2 font-medium text-sm ${
                  activeTab === 'details'
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                Details
              </button>
              {application.documents && application.documents.length > 0 && (
                <button
                  onClick={() => setActiveTab('documents')}
                  className={`py-4 px-1 border-b-2 font-medium text-sm ${
                    activeTab === 'documents'
                      ? 'border-blue-500 text-blue-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  Documents
                </button>
              )}
              {application.location && (
                <button
                  onClick={() => setActiveTab('map')}
                  className={`py-4 px-1 border-b-2 font-medium text-sm ${
                    activeTab === 'map'
                      ? 'border-blue-500 text-blue-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  Map
                </button>
              )}
            </nav>
          </div>
          
          {/* Tab content */}
          <div>
            {activeTab === 'details' && (
              <div>
                <div className="grid md:grid-cols-2 gap-8">
                  <div>
                    <h2 className="text-xl font-semibold mb-3">Description</h2>
                    <p className="text-gray-700">{application.description}</p>
                  </div>
                  
                  {application.imageUrl && (
                    <div>
                      <img 
                        src={application.imageUrl} 
                        alt={application.title} 
                        className="w-full h-auto rounded-md shadow-sm"
                        onError={(e) => {
                          e.currentTarget.src = "https://via.placeholder.com/600x400?text=No+Image";
                        }}
                      />
                    </div>
                  )}
                </div>
                
                <div className="mt-8">
                  <h2 className="text-xl font-semibold mb-3">Application Timeline</h2>
                  <div className="border-l-2 border-gray-200 pl-4 ml-4 space-y-6">
                    <div className="relative">
                      <div className="absolute -left-6 mt-1 w-4 h-4 rounded-full bg-blue-500"></div>
                      <div>
                        <p className="font-medium">Application Submitted</p>
                        <p className="text-sm text-gray-500">{formatDate(application.date)}</p>
                      </div>
                    </div>
                    <div className="relative">
                      <div className="absolute -left-6 mt-1 w-4 h-4 rounded-full bg-gray-300"></div>
                      <div>
                        <p className="font-medium">Consultation Period</p>
                        <p className="text-sm text-gray-500">In progress</p>
                      </div>
                    </div>
                    <div className="relative">
                      <div className="absolute -left-6 mt-1 w-4 h-4 rounded-full bg-gray-300"></div>
                      <div>
                        <p className="font-medium">Decision</p>
                        <p className="text-sm text-gray-500">Pending</p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}
            
            {activeTab === 'documents' && application.documents && (
              <div>
                <h2 className="text-xl font-semibold mb-4">Application Documents</h2>
                <ul className="bg-gray-50 rounded-md divide-y divide-gray-200">
                  {application.documents.map((doc: any) => (
                    <li key={doc.id} className="p-4">
                      <a 
                        href={doc.url} 
                        className="text-blue-600 hover:text-blue-800 flex items-center"
                        target="_blank"
                        rel="noopener noreferrer"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                          <path fillRule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z" clipRule="evenodd" />
                        </svg>
                        {doc.title} ({doc.type})
                      </a>
                    </li>
                  ))}
                </ul>
              </div>
            )}
            
            {activeTab === 'map' && application.location && (
              <div>
                <h2 className="text-xl font-semibold mb-4">Application Location</h2>
                <ApplicationMap 
                  applications={[application]} 
                  center={application.location}
                  zoom={16}
                  height="400px"
                />
                <p className="mt-4 text-gray-600 text-sm">
                  {application.address}
                </p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ApplicationDetails; 