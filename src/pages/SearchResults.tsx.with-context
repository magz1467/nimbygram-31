import React, { useEffect } from 'react';
import { useSearchParams } from 'react-router-dom';
import SearchForm from '../components/SearchForm';
import PlanningApplicationList from '../components/PlanningApplicationList';
import LoadingSpinner from '../components/LoadingSpinner';
import { useApplications } from '../context/ApplicationContext';

const SearchResults: React.FC = () => {
  const [searchParams, setSearchParams] = useSearchParams();
  const { applications, loading, error, fetchApplications } = useApplications();

  // Get search parameters from URL
  const query = searchParams.get('query') || '';
  const location = searchParams.get('location') || '';
  const radius = parseInt(searchParams.get('radius') || '5', 10);

  // Handle search form submission
  const handleSearch = (newQuery: string, newLocation: string, newRadius: number) => {
    // Update URL parameters
    setSearchParams({
      query: newQuery,
      location: newLocation,
      radius: newRadius.toString()
    });
  };

  // Fetch applications when search parameters change
  useEffect(() => {
    if (query || location) {
      fetchApplications(query, location, radius);
    }
  }, [query, location, radius, fetchApplications]);

  return (
    <div className="container mx-auto max-w-6xl px-4 py-8">
      <h1 className="text-3xl font-bold mb-6">Search Planning Applications</h1>
      
      <div className="mb-8">
        <SearchForm 
          onSearch={handleSearch}
          initialQuery={query}
          initialLocation={location}
          initialRadius={radius}
        />
      </div>
      
      {query || location ? (
        <div>
          <h2 className="text-2xl font-semibold mb-4">
            Results {applications.length > 0 && !loading && `(${applications.length})`}
          </h2>
          
          {error && (
            <div className="bg-red-50 text-red-800 p-4 rounded-md mb-6">
              {error}
            </div>
          )}
          
          {loading ? (
            <div className="flex justify-center py-12">
              <LoadingSpinner size="large" text="Searching for applications..." />
            </div>
          ) : (
            <PlanningApplicationList applications={applications} />
          )}
        </div>
      ) : (
        <div className="text-center py-12 bg-gray-50 rounded-lg">
          <h3 className="text-xl font-medium text-gray-700 mb-2">Enter search criteria</h3>
          <p className="text-gray-600">
            Use the search form above to find planning applications in your area
          </p>
        </div>
      )}
    </div>
  );
};

export default SearchResults; 