
/* Container with fixed min-height to prevent layout shifts */
.search-view-container {
  position: relative;
  min-height: 500px; /* Adjust based on your average content height */
}

/* Progress bar styles */
.search-progress-bar {
  position: sticky;
  top: 0;
  left: 0;
  right: 0;
  height: 4px;
  background-color: #f0f0f0;
  z-index: 10;
  overflow: hidden;
}

.search-progress-fill {
  height: 100%;
  background-color: #0284c7; /* Tailwind blue-600 */
  transition: width 0.3s ease-out;
}

.search-stage-label {
  position: absolute;
  top: 8px;
  left: 0;
  right: 0;
  text-align: center;
  font-size: 0.75rem;
  color: #6b7280; /* Tailwind gray-500 */
}

/* Content area with controlled transitions */
.search-content-area {
  position: relative;
  transition: opacity 0.3s ease-out;
}

/* Fade in/out animations for content */
.search-content-area > * {
  animation: fadeIn 0.3s ease-out;
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

/* Skeleton styling with fixed dimensions */
.search-result-skeleton {
  opacity: 0;
  animation: pulseAnimation 1.5s infinite ease-in-out;
  animation-fill-mode: forwards;
}

@keyframes pulseAnimation {
  0% {
    opacity: 0.6;
  }
  50% {
    opacity: 0.8;
  }
  100% {
    opacity: 0.6;
  }
}

/* Fixed height for result items to prevent layout shifts */
.application-item {
  min-height: 150px; /* Adjust based on your content */
  contain: layout;
}

/* When transitioning between states, maintain the container height */
.search-skeleton-container,
.applications-list-container,
.no-results-container,
.error-view-container {
  min-height: inherit;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  transition: opacity 0.3s ease-out;
}

/* Ensure only one view is visible at a time with crossfade */
.search-view-container.loading .applications-list-container,
.search-view-container.loading .no-results-container,
.search-view-container.loading .error-view-container {
  opacity: 0;
  pointer-events: none;
}

.search-view-container:not(.loading) .search-skeleton-container {
  opacity: 0;
  pointer-events: none;
}
